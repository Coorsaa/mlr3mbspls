// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// knn_predict_classif_gower_cpp
Rcpp::List knn_predict_classif_gower_cpp(const arma::mat& Xnum_train, const arma::imat& Xcat_train, const arma::mat& Xord_train, const arma::mat& Xnum_test, const arma::imat& Xcat_test, const arma::mat& Xord_test, const arma::rowvec& ranges_num, const Rcpp::IntegerVector& y_train, const int k, const std::string& weight_scheme, const double min_feature_frac, const Rcpp::NumericVector& priors);
RcppExport SEXP _mlr3mbspls_knn_predict_classif_gower_cpp(SEXP Xnum_trainSEXP, SEXP Xcat_trainSEXP, SEXP Xord_trainSEXP, SEXP Xnum_testSEXP, SEXP Xcat_testSEXP, SEXP Xord_testSEXP, SEXP ranges_numSEXP, SEXP y_trainSEXP, SEXP kSEXP, SEXP weight_schemeSEXP, SEXP min_feature_fracSEXP, SEXP priorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Xnum_train(Xnum_trainSEXP);
    Rcpp::traits::input_parameter< const arma::imat& >::type Xcat_train(Xcat_trainSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xord_train(Xord_trainSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xnum_test(Xnum_testSEXP);
    Rcpp::traits::input_parameter< const arma::imat& >::type Xcat_test(Xcat_testSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xord_test(Xord_testSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type ranges_num(ranges_numSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type y_train(y_trainSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type weight_scheme(weight_schemeSEXP);
    Rcpp::traits::input_parameter< const double >::type min_feature_frac(min_feature_fracSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type priors(priorsSEXP);
    rcpp_result_gen = Rcpp::wrap(knn_predict_classif_gower_cpp(Xnum_train, Xcat_train, Xord_train, Xnum_test, Xcat_test, Xord_test, ranges_num, y_train, k, weight_scheme, min_feature_frac, priors));
    return rcpp_result_gen;
END_RCPP
}
// knn_predict_regr_gower_cpp
Rcpp::List knn_predict_regr_gower_cpp(const arma::mat& Xnum_train, const arma::imat& Xcat_train, const arma::mat& Xord_train, const arma::mat& Xnum_test, const arma::imat& Xcat_test, const arma::mat& Xord_test, const arma::rowvec& ranges_num, const arma::vec& y_train, const int k, const std::string& weight_scheme, const double min_feature_frac, const double fallback_mean, const double fallback_var);
RcppExport SEXP _mlr3mbspls_knn_predict_regr_gower_cpp(SEXP Xnum_trainSEXP, SEXP Xcat_trainSEXP, SEXP Xord_trainSEXP, SEXP Xnum_testSEXP, SEXP Xcat_testSEXP, SEXP Xord_testSEXP, SEXP ranges_numSEXP, SEXP y_trainSEXP, SEXP kSEXP, SEXP weight_schemeSEXP, SEXP min_feature_fracSEXP, SEXP fallback_meanSEXP, SEXP fallback_varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Xnum_train(Xnum_trainSEXP);
    Rcpp::traits::input_parameter< const arma::imat& >::type Xcat_train(Xcat_trainSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xord_train(Xord_trainSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xnum_test(Xnum_testSEXP);
    Rcpp::traits::input_parameter< const arma::imat& >::type Xcat_test(Xcat_testSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xord_test(Xord_testSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type ranges_num(ranges_numSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_train(y_trainSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type weight_scheme(weight_schemeSEXP);
    Rcpp::traits::input_parameter< const double >::type min_feature_frac(min_feature_fracSEXP);
    Rcpp::traits::input_parameter< const double >::type fallback_mean(fallback_meanSEXP);
    Rcpp::traits::input_parameter< const double >::type fallback_var(fallback_varSEXP);
    rcpp_result_gen = Rcpp::wrap(knn_predict_regr_gower_cpp(Xnum_train, Xcat_train, Xord_train, Xnum_test, Xcat_test, Xord_test, ranges_num, y_train, k, weight_scheme, min_feature_frac, fallback_mean, fallback_var));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mbspca_one_lv
Rcpp::List cpp_mbspca_one_lv(const Rcpp::List& X_blocks, const arma::vec& c_vec, int max_iter, double tol);
RcppExport SEXP _mlr3mbspls_cpp_mbspca_one_lv(SEXP X_blocksSEXP, SEXP c_vecSEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type X_blocks(X_blocksSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type c_vec(c_vecSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mbspca_one_lv(X_blocks, c_vec, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}
// perm_test_component_mbspca
double perm_test_component_mbspca(const Rcpp::List& X_blocks, const Rcpp::List& W_list, const arma::vec& c_vec, int n_perm, double alpha);
RcppExport SEXP _mlr3mbspls_perm_test_component_mbspca(SEXP X_blocksSEXP, SEXP W_listSEXP, SEXP c_vecSEXP, SEXP n_permSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type X_blocks(X_blocksSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type W_list(W_listSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type c_vec(c_vecSEXP);
    Rcpp::traits::input_parameter< int >::type n_perm(n_permSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(perm_test_component_mbspca(X_blocks, W_list, c_vec, n_perm, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mbspls_one_lv
Rcpp::List cpp_mbspls_one_lv(const Rcpp::List& X_blocks, const arma::vec& c_constraints, int max_iter, double tol, bool frobenius, bool spearman);
RcppExport SEXP _mlr3mbspls_cpp_mbspls_one_lv(SEXP X_blocksSEXP, SEXP c_constraintsSEXP, SEXP max_iterSEXP, SEXP tolSEXP, SEXP frobeniusSEXP, SEXP spearmanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type X_blocks(X_blocksSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type c_constraints(c_constraintsSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type frobenius(frobeniusSEXP);
    Rcpp::traits::input_parameter< bool >::type spearman(spearmanSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mbspls_one_lv(X_blocks, c_constraints, max_iter, tol, frobenius, spearman));
    return rcpp_result_gen;
END_RCPP
}
// perm_test_component
double perm_test_component(const std::vector<arma::mat>& X_orig, const std::vector<arma::vec>& W_orig, const arma::vec& c_vec, int n_perm, bool spearman, int max_iter, double tol, double early_stop_threshold, bool frobenius);
RcppExport SEXP _mlr3mbspls_perm_test_component(SEXP X_origSEXP, SEXP W_origSEXP, SEXP c_vecSEXP, SEXP n_permSEXP, SEXP spearmanSEXP, SEXP max_iterSEXP, SEXP tolSEXP, SEXP early_stop_thresholdSEXP, SEXP frobeniusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<arma::mat>& >::type X_orig(X_origSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::vec>& >::type W_orig(W_origSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type c_vec(c_vecSEXP);
    Rcpp::traits::input_parameter< int >::type n_perm(n_permSEXP);
    Rcpp::traits::input_parameter< bool >::type spearman(spearmanSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type early_stop_threshold(early_stop_thresholdSEXP);
    Rcpp::traits::input_parameter< bool >::type frobenius(frobeniusSEXP);
    rcpp_result_gen = Rcpp::wrap(perm_test_component(X_orig, W_orig, c_vec, n_perm, spearman, max_iter, tol, early_stop_threshold, frobenius));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mbspls_multi_lv
Rcpp::List cpp_mbspls_multi_lv(const Rcpp::List& X_blocks, const arma::vec& c_constraints, int K, int max_iter, double tol, bool spearman, bool do_perm, int n_perm, double alpha, bool frobenius);
RcppExport SEXP _mlr3mbspls_cpp_mbspls_multi_lv(SEXP X_blocksSEXP, SEXP c_constraintsSEXP, SEXP KSEXP, SEXP max_iterSEXP, SEXP tolSEXP, SEXP spearmanSEXP, SEXP do_permSEXP, SEXP n_permSEXP, SEXP alphaSEXP, SEXP frobeniusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type X_blocks(X_blocksSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type c_constraints(c_constraintsSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type spearman(spearmanSEXP);
    Rcpp::traits::input_parameter< bool >::type do_perm(do_permSEXP);
    Rcpp::traits::input_parameter< int >::type n_perm(n_permSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type frobenius(frobeniusSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mbspls_multi_lv(X_blocks, c_constraints, K, max_iter, tol, spearman, do_perm, n_perm, alpha, frobenius));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mbspls_multi_lv_cmatrix
Rcpp::List cpp_mbspls_multi_lv_cmatrix(const Rcpp::List& X_blocks, const arma::mat& c_matrix, int max_iter, double tol, bool spearman, bool do_perm, int n_perm, double alpha, bool frobenius);
RcppExport SEXP _mlr3mbspls_cpp_mbspls_multi_lv_cmatrix(SEXP X_blocksSEXP, SEXP c_matrixSEXP, SEXP max_iterSEXP, SEXP tolSEXP, SEXP spearmanSEXP, SEXP do_permSEXP, SEXP n_permSEXP, SEXP alphaSEXP, SEXP frobeniusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type X_blocks(X_blocksSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type c_matrix(c_matrixSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type spearman(spearmanSEXP);
    Rcpp::traits::input_parameter< bool >::type do_perm(do_permSEXP);
    Rcpp::traits::input_parameter< int >::type n_perm(n_permSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type frobenius(frobeniusSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mbspls_multi_lv_cmatrix(X_blocks, c_matrix, max_iter, tol, spearman, do_perm, n_perm, alpha, frobenius));
    return rcpp_result_gen;
END_RCPP
}
// cpp_ev_test
Rcpp::List cpp_ev_test(const Rcpp::List& X_test, const Rcpp::List& weights, const Rcpp::List& loadings, int ncomp);
RcppExport SEXP _mlr3mbspls_cpp_ev_test(SEXP X_testSEXP, SEXP weightsSEXP, SEXP loadingsSEXP, SEXP ncompSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type loadings(loadingsSEXP);
    Rcpp::traits::input_parameter< int >::type ncomp(ncompSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_ev_test(X_test, weights, loadings, ncomp));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mbspls_bootstrap
Rcpp::List cpp_mbspls_bootstrap(const Rcpp::List& X_blocks, const arma::vec& c_constraints, const Rcpp::List& W_ref, int R, bool spearman, bool frobenius, int max_iter, double tol, bool store_weights);
RcppExport SEXP _mlr3mbspls_cpp_mbspls_bootstrap(SEXP X_blocksSEXP, SEXP c_constraintsSEXP, SEXP W_refSEXP, SEXP RSEXP, SEXP spearmanSEXP, SEXP frobeniusSEXP, SEXP max_iterSEXP, SEXP tolSEXP, SEXP store_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type X_blocks(X_blocksSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type c_constraints(c_constraintsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type W_ref(W_refSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< bool >::type spearman(spearmanSEXP);
    Rcpp::traits::input_parameter< bool >::type frobenius(frobeniusSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type store_weights(store_weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mbspls_bootstrap(X_blocks, c_constraints, W_ref, R, spearman, frobenius, max_iter, tol, store_weights));
    return rcpp_result_gen;
END_RCPP
}
// cpp_bootstrap_latent_correlation
double cpp_bootstrap_latent_correlation(const arma::mat& weights_matrix, const arma::ivec& component_idx, const arma::ivec& block_idx, int n_blocks, int n_components, bool spearman, double min_var, bool frobenius);
RcppExport SEXP _mlr3mbspls_cpp_bootstrap_latent_correlation(SEXP weights_matrixSEXP, SEXP component_idxSEXP, SEXP block_idxSEXP, SEXP n_blocksSEXP, SEXP n_componentsSEXP, SEXP spearmanSEXP, SEXP min_varSEXP, SEXP frobeniusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type weights_matrix(weights_matrixSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type component_idx(component_idxSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type block_idx(block_idxSEXP);
    Rcpp::traits::input_parameter< int >::type n_blocks(n_blocksSEXP);
    Rcpp::traits::input_parameter< int >::type n_components(n_componentsSEXP);
    Rcpp::traits::input_parameter< bool >::type spearman(spearmanSEXP);
    Rcpp::traits::input_parameter< double >::type min_var(min_varSEXP);
    Rcpp::traits::input_parameter< bool >::type frobenius(frobeniusSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_bootstrap_latent_correlation(weights_matrix, component_idx, block_idx, n_blocks, n_components, spearman, min_var, frobenius));
    return rcpp_result_gen;
END_RCPP
}
// cpp_perm_test_oos
Rcpp::List cpp_perm_test_oos(const Rcpp::List& X_test, const Rcpp::List& W_trained, int n_perm, bool spearman, bool frobenius, double early_stop_threshold, bool permute_all_blocks);
RcppExport SEXP _mlr3mbspls_cpp_perm_test_oos(SEXP X_testSEXP, SEXP W_trainedSEXP, SEXP n_permSEXP, SEXP spearmanSEXP, SEXP frobeniusSEXP, SEXP early_stop_thresholdSEXP, SEXP permute_all_blocksSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type W_trained(W_trainedSEXP);
    Rcpp::traits::input_parameter< int >::type n_perm(n_permSEXP);
    Rcpp::traits::input_parameter< bool >::type spearman(spearmanSEXP);
    Rcpp::traits::input_parameter< bool >::type frobenius(frobeniusSEXP);
    Rcpp::traits::input_parameter< double >::type early_stop_threshold(early_stop_thresholdSEXP);
    Rcpp::traits::input_parameter< bool >::type permute_all_blocks(permute_all_blocksSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_perm_test_oos(X_test, W_trained, n_perm, spearman, frobenius, early_stop_threshold, permute_all_blocks));
    return rcpp_result_gen;
END_RCPP
}
// cpp_lm_coeff_ridge
arma::mat cpp_lm_coeff_ridge(const arma::mat& X, const arma::mat& Y, const double lambda, Rcpp::Nullable<Rcpp::IntegerVector> unpen_idx);
RcppExport SEXP _mlr3mbspls_cpp_lm_coeff_ridge(SEXP XSEXP, SEXP YSEXP, SEXP lambdaSEXP, SEXP unpen_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerVector> >::type unpen_idx(unpen_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_lm_coeff_ridge(X, Y, lambda, unpen_idx));
    return rcpp_result_gen;
END_RCPP
}
// cpp_lm_coeff
arma::mat cpp_lm_coeff(const arma::mat& X, const arma::mat& Y);
RcppExport SEXP _mlr3mbspls_cpp_lm_coeff(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_lm_coeff(X, Y));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mlr3mbspls_knn_predict_classif_gower_cpp", (DL_FUNC) &_mlr3mbspls_knn_predict_classif_gower_cpp, 12},
    {"_mlr3mbspls_knn_predict_regr_gower_cpp", (DL_FUNC) &_mlr3mbspls_knn_predict_regr_gower_cpp, 13},
    {"_mlr3mbspls_cpp_mbspca_one_lv", (DL_FUNC) &_mlr3mbspls_cpp_mbspca_one_lv, 4},
    {"_mlr3mbspls_perm_test_component_mbspca", (DL_FUNC) &_mlr3mbspls_perm_test_component_mbspca, 5},
    {"_mlr3mbspls_cpp_mbspls_one_lv", (DL_FUNC) &_mlr3mbspls_cpp_mbspls_one_lv, 6},
    {"_mlr3mbspls_perm_test_component", (DL_FUNC) &_mlr3mbspls_perm_test_component, 9},
    {"_mlr3mbspls_cpp_mbspls_multi_lv", (DL_FUNC) &_mlr3mbspls_cpp_mbspls_multi_lv, 10},
    {"_mlr3mbspls_cpp_mbspls_multi_lv_cmatrix", (DL_FUNC) &_mlr3mbspls_cpp_mbspls_multi_lv_cmatrix, 9},
    {"_mlr3mbspls_cpp_ev_test", (DL_FUNC) &_mlr3mbspls_cpp_ev_test, 4},
    {"_mlr3mbspls_cpp_mbspls_bootstrap", (DL_FUNC) &_mlr3mbspls_cpp_mbspls_bootstrap, 9},
    {"_mlr3mbspls_cpp_bootstrap_latent_correlation", (DL_FUNC) &_mlr3mbspls_cpp_bootstrap_latent_correlation, 8},
    {"_mlr3mbspls_cpp_perm_test_oos", (DL_FUNC) &_mlr3mbspls_cpp_perm_test_oos, 7},
    {"_mlr3mbspls_cpp_lm_coeff_ridge", (DL_FUNC) &_mlr3mbspls_cpp_lm_coeff_ridge, 4},
    {"_mlr3mbspls_cpp_lm_coeff", (DL_FUNC) &_mlr3mbspls_cpp_lm_coeff, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_mlr3mbspls(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
